// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: upload.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UploadService service

func NewUploadServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UploadService service

type UploadService interface {
	UploadEntry(ctx context.Context, in *ReqUploadEntry, opts ...client.CallOption) (*RespUploadEntry, error)
	UpdateFileMeta(ctx context.Context, in *ReqUpdateFileMeta, opts ...client.CallOption) (*RespUpdateFileMeta, error)
	UploadFile(ctx context.Context, in *ReqUploadFile, opts ...client.CallOption) (*RespUploadFile, error)
	InitialMultipartUpload(ctx context.Context, in *ReqInitialMultipartUpload, opts ...client.CallOption) (*RespInitialMultipartUpload, error)
	UploadChunkFile(ctx context.Context, in *ReqUploadChunkFile, opts ...client.CallOption) (*RespUploadChunkFile, error)
	CompleteMultipartUpload(ctx context.Context, in *ReqCompleteMultipartUpload, opts ...client.CallOption) (*RespCompleteMultipartUpload, error)
	CancelUpload(ctx context.Context, in *ReqCancelUpload, opts ...client.CallOption) (*RespCancelUpload, error)
	FastUpload(ctx context.Context, in *ReqFastUpload, opts ...client.CallOption) (*RespFastUpload, error)
}

type uploadService struct {
	c    client.Client
	name string
}

func NewUploadService(name string, c client.Client) UploadService {
	return &uploadService{
		c:    c,
		name: name,
	}
}

func (c *uploadService) UploadEntry(ctx context.Context, in *ReqUploadEntry, opts ...client.CallOption) (*RespUploadEntry, error) {
	req := c.c.NewRequest(c.name, "UploadService.UploadEntry", in)
	out := new(RespUploadEntry)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadService) UpdateFileMeta(ctx context.Context, in *ReqUpdateFileMeta, opts ...client.CallOption) (*RespUpdateFileMeta, error) {
	req := c.c.NewRequest(c.name, "UploadService.UpdateFileMeta", in)
	out := new(RespUpdateFileMeta)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadService) UploadFile(ctx context.Context, in *ReqUploadFile, opts ...client.CallOption) (*RespUploadFile, error) {
	req := c.c.NewRequest(c.name, "UploadService.UploadFile", in)
	out := new(RespUploadFile)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadService) InitialMultipartUpload(ctx context.Context, in *ReqInitialMultipartUpload, opts ...client.CallOption) (*RespInitialMultipartUpload, error) {
	req := c.c.NewRequest(c.name, "UploadService.InitialMultipartUpload", in)
	out := new(RespInitialMultipartUpload)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadService) UploadChunkFile(ctx context.Context, in *ReqUploadChunkFile, opts ...client.CallOption) (*RespUploadChunkFile, error) {
	req := c.c.NewRequest(c.name, "UploadService.UploadChunkFile", in)
	out := new(RespUploadChunkFile)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadService) CompleteMultipartUpload(ctx context.Context, in *ReqCompleteMultipartUpload, opts ...client.CallOption) (*RespCompleteMultipartUpload, error) {
	req := c.c.NewRequest(c.name, "UploadService.CompleteMultipartUpload", in)
	out := new(RespCompleteMultipartUpload)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadService) CancelUpload(ctx context.Context, in *ReqCancelUpload, opts ...client.CallOption) (*RespCancelUpload, error) {
	req := c.c.NewRequest(c.name, "UploadService.CancelUpload", in)
	out := new(RespCancelUpload)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadService) FastUpload(ctx context.Context, in *ReqFastUpload, opts ...client.CallOption) (*RespFastUpload, error) {
	req := c.c.NewRequest(c.name, "UploadService.FastUpload", in)
	out := new(RespFastUpload)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UploadService service

type UploadServiceHandler interface {
	UploadEntry(context.Context, *ReqUploadEntry, *RespUploadEntry) error
	UpdateFileMeta(context.Context, *ReqUpdateFileMeta, *RespUpdateFileMeta) error
	UploadFile(context.Context, *ReqUploadFile, *RespUploadFile) error
	InitialMultipartUpload(context.Context, *ReqInitialMultipartUpload, *RespInitialMultipartUpload) error
	UploadChunkFile(context.Context, *ReqUploadChunkFile, *RespUploadChunkFile) error
	CompleteMultipartUpload(context.Context, *ReqCompleteMultipartUpload, *RespCompleteMultipartUpload) error
	CancelUpload(context.Context, *ReqCancelUpload, *RespCancelUpload) error
	FastUpload(context.Context, *ReqFastUpload, *RespFastUpload) error
}

func RegisterUploadServiceHandler(s server.Server, hdlr UploadServiceHandler, opts ...server.HandlerOption) error {
	type uploadService interface {
		UploadEntry(ctx context.Context, in *ReqUploadEntry, out *RespUploadEntry) error
		UpdateFileMeta(ctx context.Context, in *ReqUpdateFileMeta, out *RespUpdateFileMeta) error
		UploadFile(ctx context.Context, in *ReqUploadFile, out *RespUploadFile) error
		InitialMultipartUpload(ctx context.Context, in *ReqInitialMultipartUpload, out *RespInitialMultipartUpload) error
		UploadChunkFile(ctx context.Context, in *ReqUploadChunkFile, out *RespUploadChunkFile) error
		CompleteMultipartUpload(ctx context.Context, in *ReqCompleteMultipartUpload, out *RespCompleteMultipartUpload) error
		CancelUpload(ctx context.Context, in *ReqCancelUpload, out *RespCancelUpload) error
		FastUpload(ctx context.Context, in *ReqFastUpload, out *RespFastUpload) error
	}
	type UploadService struct {
		uploadService
	}
	h := &uploadServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UploadService{h}, opts...))
}

type uploadServiceHandler struct {
	UploadServiceHandler
}

func (h *uploadServiceHandler) UploadEntry(ctx context.Context, in *ReqUploadEntry, out *RespUploadEntry) error {
	return h.UploadServiceHandler.UploadEntry(ctx, in, out)
}

func (h *uploadServiceHandler) UpdateFileMeta(ctx context.Context, in *ReqUpdateFileMeta, out *RespUpdateFileMeta) error {
	return h.UploadServiceHandler.UpdateFileMeta(ctx, in, out)
}

func (h *uploadServiceHandler) UploadFile(ctx context.Context, in *ReqUploadFile, out *RespUploadFile) error {
	return h.UploadServiceHandler.UploadFile(ctx, in, out)
}

func (h *uploadServiceHandler) InitialMultipartUpload(ctx context.Context, in *ReqInitialMultipartUpload, out *RespInitialMultipartUpload) error {
	return h.UploadServiceHandler.InitialMultipartUpload(ctx, in, out)
}

func (h *uploadServiceHandler) UploadChunkFile(ctx context.Context, in *ReqUploadChunkFile, out *RespUploadChunkFile) error {
	return h.UploadServiceHandler.UploadChunkFile(ctx, in, out)
}

func (h *uploadServiceHandler) CompleteMultipartUpload(ctx context.Context, in *ReqCompleteMultipartUpload, out *RespCompleteMultipartUpload) error {
	return h.UploadServiceHandler.CompleteMultipartUpload(ctx, in, out)
}

func (h *uploadServiceHandler) CancelUpload(ctx context.Context, in *ReqCancelUpload, out *RespCancelUpload) error {
	return h.UploadServiceHandler.CancelUpload(ctx, in, out)
}

func (h *uploadServiceHandler) FastUpload(ctx context.Context, in *ReqFastUpload, out *RespFastUpload) error {
	return h.UploadServiceHandler.FastUpload(ctx, in, out)
}
